Absolutely, this is a very common and critical issue in sensor-based systems, especially in **predictive maintenance, IoT, control systems**, and **fault detection frameworks**. These kinds of problems are generally tackled using a combination of **statistical filtering, signal processing, and machine learning techniques**.

Here’s a complete list of methods and algorithms you can explore to **detect and prevent false alarms** due to sudden but temporary sensor deviations:

---

## ✅ 1. **Statistical Thresholding with Hysteresis**

* **Problem:** A single spike triggers a false alarm.
* **Solution:** Use a **hysteresis band**: only trigger alarm if value exceeds a high threshold *and* stays beyond it for *n* consecutive readings.
* **Code Idea:**

```python
if value > upper_threshold:
    counter += 1
else:
    counter = 0

if counter >= required_count:
    alarm = True
```

---

## ✅ 2. **Moving Average / Exponential Smoothing**

* Smooths out sensor noise and prevents reacting to instant jumps.
* **Simple Moving Average (SMA):**

  $$
  \text{SMA}_t = \frac{1}{n} \sum_{i=0}^{n-1} x_{t-i}
  $$
* **Exponential Smoothing (EWMA):**

  $$
  S_t = \alpha x_t + (1 - \alpha) S_{t-1}
  $$
* **Python Example:**

```python
alpha = 0.3
smoothed_value = alpha * new_value + (1 - alpha) * previous_smoothed
```

---

## ✅ 3. **Z-Score or Mahalanobis Distance**

* Flags values that are too many standard deviations away from the mean.
* **Z-Score:**

  $$
  z = \frac{x - \mu}{\sigma}
  $$

  If $|z| > 3$, treat as anomaly.
* **Mahalanobis** is better for multidimensional sensor data:

  $$
  D_M(x) = \sqrt{(x - \mu)^T \Sigma^{-1} (x - \mu)}
  $$

---

## ✅ 4. **Isolation Forest / One-Class SVM (ML-Based Anomaly Detection)**

* These are trained on **normal behavior**. Anything that deviates significantly is flagged.
* **Best when:**

  * You have large historic sensor data.
  * Need unsupervised anomaly detection.

---

## ✅ 5. **Kalman Filter**

* Optimal for linear systems with Gaussian noise.
* It estimates the “true state” of a system by accounting for measurement and process noise.
* Helps ignore sudden spikes if they're not consistent with model predictions.

---

## ✅ 6. **Rule-Based + Temporal Logic**

* Example: If a high temperature is followed by normal in 1 cycle → suppress the alarm.
* Add temporal rules like:

  ```
  If (Temp > threshold) AND (next_temp < threshold within 3 seconds): ignore_alarm
  ```

---

## ✅ 7. **Change Point Detection (e.g. Bayesian Online Change Point Detection)**

* Detects **statistical changes** in data streams.
* You can use:

  * **Ruptures library** in Python
  * **Bayesian methods** to track probability of change in mean/variance

---

## ✅ 8. **Autoencoders (Deep Learning)**

* Train on normal sequences. During inference, high reconstruction error implies anomaly.
* Works great on **time-series sensor data**.

---

## ✅ 9. **Wavelet Denoising**

* Use wavelet transforms to decompose signal and remove high-frequency noise/spikes.
* Especially useful if you're dealing with analog signal from sensors.

---

## ✅ 10. **CUSUM (Cumulative Sum Control Chart)**

* Detects small shifts in mean value that exceed allowable noise.
* Trigger alarm only if cumulative sum of deviations exceeds a threshold.

$$
S_t = \max(0, S_{t-1} + x_t - (\mu + k))
$$

Where:

* $\mu$: target value
* $k$: allowable drift

---

## 👉 Example Strategy You Can Code:

```python
def check_fault(value, history, threshold=3, min_consecutive=3):
    mean = np.mean(history)
    std = np.std(history)
    z_score = abs((value - mean) / std)
    
    if z_score > threshold:
        history.append(value)
        return False  # temporary spike, wait for confirmation
    else:
        history.append(value)
        return True   # normal reading
```

---

## ✅ Practical Tips

* Use a **sliding window** buffer for smoothing or anomaly checking.
* Implement a **cooldown period** after alarm so it doesn't re-trigger repeatedly.
* Combine methods: e.g. smoothing + z-score + rule-based logic.

---

Would you like a sample Python implementation combining a few of these methods into a real-time sensor monitor?
Perfect. Here's a comprehensive breakdown of **false alarm detection and prevention** techniques using sensor data, explained with logic, formulas, and examples to help you fully understand and implement them in code:

---

## 🔹 1. **Hysteresis Thresholding (with Consecutive Count Logic)**

### 💡 **Goal:** Avoid reacting to single outlier spikes

### 🔁 **Flow:**

1. Define a threshold for triggering an alarm.
2. Count how many consecutive readings exceed that threshold.
3. Trigger alarm only if this count exceeds a minimum value.

### 🧠 **Logic:**

```text
If sensor value > threshold:
    increment counter
else:
    reset counter

If counter ≥ min_required:
    trigger alarm
```

### 🔢 **No formula needed** – purely logic-based.

### ✅ **Prevents false alarms from temporary spikes.**

---

## 🔹 2. **Moving Average (SMA) & Exponential Smoothing (EWMA)**

### 💡 **Goal:** Smooth the signal and remove noise

---

### a. **Simple Moving Average (SMA)**

### 📈 Formula:

$$
\text{SMA}_t = \frac{1}{n} \sum_{i=0}^{n-1} x_{t-i}
$$

Where:

* $n$: window size
* $x$: sensor readings

### 🔁 Flow:

1. Maintain a sliding window of last $n$ readings.
2. Compute average.
3. Use average for comparison instead of raw data.

---

### b. **Exponential Weighted Moving Average (EWMA)**

### 📈 Formula:

$$
S_t = \alpha x_t + (1 - \alpha) S_{t-1}
$$

Where:

* $\alpha$: smoothing factor (0 < α < 1)
* $x_t$: current reading
* $S_{t-1}$: previous smoothed value

### 🔁 Flow:

1. Initialize with first reading.
2. Update smoothed value each time a new reading arrives.
3. Compare smoothed value to thresholds.

---

## 🔹 3. **Z-Score Based Anomaly Detection**

### 💡 **Goal:** Identify outliers based on statistical deviation

### 📈 Formula:

$$
z = \frac{x - \mu}{\sigma}
$$

Where:

* $x$: current value
* $\mu$: mean of past values
* $\sigma$: standard deviation

### 🔁 Flow:

1. Collect recent window of sensor data.
2. Calculate mean and standard deviation.
3. If $|z| > \text{threshold}$ (e.g. 3), flag as anomaly.

---

## 🔹 4. **Mahalanobis Distance (Multivariate Anomaly Detection)**

### 💡 **Goal:** Detect anomalies in multiple sensors

### 📈 Formula:

$$
D_M(x) = \sqrt{(x - \mu)^T \Sigma^{-1} (x - \mu)}
$$

Where:

* $\mu$: vector mean
* $\Sigma$: covariance matrix
* $x$: current vector

### 🔁 Flow:

1. Gather historical normal data.
2. Compute $\mu$ and $\Sigma$.
3. For each new vector reading, compute distance.
4. If distance > threshold, flag as anomaly.

---

## 🔹 5. **Kalman Filter (State Estimation)**

### 💡 **Goal:** Predict the expected value and update using actual value, filtering noise

### 📈 Equations:

* **Predict Step:**

  $$
  \hat{x}_{k|k-1} = A \hat{x}_{k-1|k-1} + B u_k
  $$

  $$
  P_{k|k-1} = A P_{k-1|k-1} A^T + Q
  $$
* **Update Step:**

  $$
  K_k = \frac{P_{k|k-1} H^T}{H P_{k|k-1} H^T + R}
  $$

  $$
  \hat{x}_{k|k} = \hat{x}_{k|k-1} + K_k (z_k - H \hat{x}_{k|k-1})
  $$

  $$
  P_{k|k} = (I - K_k H) P_{k|k-1}
  $$

### 🔁 Flow:

1. Initialize state estimate.
2. Predict next state.
3. Compare to sensor reading.
4. Update state if they match within tolerance; else, treat as noise.

---

## 🔹 6. **Rule-Based Temporal Logic**

### 💡 **Goal:** Use domain-specific rules and timing to avoid false positives

### 🔁 Flow:

```text
If sensor reading exceeds threshold:
    Wait for X seconds or next N readings.
    If condition persists: trigger alarm.
    Else: ignore.
```

### 🧠 Example Rule:

* "Trigger high temperature alarm only if temperature > 80°C for 3 readings in a row."

---

## 🔹 7. **Change Point Detection (Ruptures or Bayesian)**

### 💡 **Goal:** Detect structural changes in the time series

### 🔁 Flow (e.g. with `ruptures` library):

1. Choose model (mean shift, variance shift).
2. Apply sliding window.
3. Compute cost function for each segment.
4. Detect significant change point.

### 📈 Models:

* **Pelt algorithm**
* **Binary segmentation**
* **Bayesian change point detection**

---

## 🔹 8. **Isolation Forest (Unsupervised ML)**

### 💡 **Goal:** Isolate anomalies in multidimensional data

### 🔁 Flow:

1. Train on normal data only.
2. Tree-based model splits data randomly.
3. Anomalies require fewer splits → flagged faster.

### 📈 Scoring:

* Average path length from root to leaf
* Anomalies have shorter paths

---

## 🔹 9. **Autoencoders (Deep Learning for Anomalies)**

### 💡 **Goal:** Reconstruct normal data well, flag poor reconstructions

### 🔁 Flow:

1. Train on normal sequences.
2. Use MSE (mean squared error) between input and output.
3. High reconstruction error = anomaly.

### 📈 Formula:

$$
\text{MSE} = \frac{1}{n} \sum_{i=1}^{n}(x_i - \hat{x}_i)^2
$$

---

## 🔹 10. **Wavelet Denoising**

### 💡 **Goal:** Remove noise using wavelet transform

### 🔁 Flow:

1. Apply Discrete Wavelet Transform (DWT).
2. Remove high-frequency components.
3. Reconstruct signal.

### 📈 Libraries:

* `PyWavelets` in Python

---

## 🔹 11. **CUSUM (Cumulative Sum Control)**

### 💡 **Goal:** Detect small but persistent shifts in sensor values

### 📈 Formula:

$$
S_t = \max(0, S_{t-1} + x_t - (\mu + k))
$$

Where:

* $\mu$: mean value
* $k$: drift tolerance

### 🔁 Flow:

1. Compute mean $\mu$.
2. For each new reading, compute cumulative deviation.
3. If $S_t > h$ → trigger alarm.

---

Would you like a working Python example combining some of these techniques with sample sensor data?
Certainly! Here's a comprehensive PDF document detailing various methods and algorithms for false alarm detection and prevention in sensor systems.

---

**📄 Download the PDF:**

[False Alarm Detection and Prevention Techniques in Sensor Systems](sandbox:/mnt/data/False_Alarm_Detection_Techniques.pdf)

---

**📘 Contents Overview:**

1. **Hysteresis Thresholding with Consecutive Count Logic**

   * Logic-based approach to prevent false alarms from transient spikes.

2. **Moving Average & Exponential Smoothing**

   * Techniques to smooth out sensor noise and prevent reacting to instant jumps.

3. **Z-Score Based Anomaly Detection**

   * Statistical method to identify outliers based on deviation from the mean.

4. **Mahalanobis Distance**

   * Multivariate approach to detect anomalies considering correlations between variables.

5. **Kalman Filter**

   * Optimal estimator for linear systems with Gaussian noise, useful for filtering out noise from sensor readings.

6. **Rule-Based Temporal Logic**

   * Domain-specific rules incorporating timing to avoid false positives.

7. **Change Point Detection**

   * Techniques to detect structural changes in time series data.

8. **Isolation Forest (Unsupervised Machine Learning)**

   * Algorithm to isolate anomalies in multidimensional data.

9. **Autoencoders (Deep Learning)**

   * Neural network models trained to reconstruct input data, with high reconstruction error indicating anomalies.

10. **Wavelet Denoising**

    * Signal processing method to remove noise using wavelet transforms.

11. **CUSUM (Cumulative Sum Control)**

    * Statistical method to detect small but persistent shifts in sensor values.

---

This document serves as a practical guide for implementing these techniques to enhance the reliability of sensor-based systems by effectively detecting and preventing false alarms.

If you need further assistance or examples on implementing any of these methods, feel free to ask!
In a temperature monitoring setup (e.g., for switchgear or industrial enclosures), various **faults can occur** in both the **sensor system** and the **physical environment**. Here’s a comprehensive list categorized into **sensor faults**, **environmental/operational faults**, and **system integration faults**, along with ideas to **replicate** each for testing:

---

### 🔧 **A. Sensor-Level Faults**

| Fault Type                               | Description                                         | How to Replicate                                                                       |
| ---------------------------------------- | --------------------------------------------------- | -------------------------------------------------------------------------------------- |
| **1. Sensor Drift**                      | Gradual deviation from true value over time         | Simulate offset in readings (e.g., add +2°C to actual value)                           |
| **2. Sensor Stuck Value (Freeze Fault)** | Sensor output freezes at a fixed value              | Override reading with a constant value in code                                         |
| **3. Noise/Spike Fault**                 | Sudden unrealistic jump in readings                 | Inject random high/low values intermittently                                           |
| **4. Short Circuit / Open Circuit**      | No data or extremely low/high readings              | Disconnect sensor or simulate with open GPIO                                           |
| **5. Calibration Error**                 | Incorrect scaling or gain                           | Multiply readings by a factor (e.g., ×0.8 or ×1.2)                                     |
| **6. Power Supply Fluctuation**          | Voltage drops affect sensor output                  | Vary input voltage (if safe) or simulate power dip in code                             |
| **7. Thermal Lag**                       | Slow response due to sensor placement or insulation | Physically move sensor into thermally lagged environment (e.g., wrapped in insulation) |

---

### 🌡️ **B. Environmental / Operational Faults**

| Fault Type                                       | Description                                    | How to Replicate                                                  |
| ------------------------------------------------ | ---------------------------------------------- | ----------------------------------------------------------------- |
| **8. Overheating**                               | Genuine rise in temperature beyond safe limits | Use a heat gun or heater in a controlled environment              |
| **9. Rapid Temperature Fluctuation**             | Fast thermal changes (can confuse system)      | Alternate heating and cooling rapidly (e.g., heater + fan)        |
| **10. Poor Airflow or Vent Blockage**            | Leads to localized hot spots                   | Cover the ventilation holes or use an enclosure                   |
| **11. External Heat Source**                     | Nearby equipment heats the sensor falsely      | Bring heat source (e.g., soldering iron, bulb) near sensor        |
| **12. Ambient-Equipment Temperature Decoupling** | Ambient is cool but equipment is heating up    | Heat a small metal block with a heater while keeping ambient cool |
| **13. Temperature Stratification**               | Different layers (top/bottom) have diff. temps | Use vertically stratified chamber (e.g., warm top, cold bottom)   |

---

### 🖥️ **C. System / Communication Faults**

| Fault Type                       | Description                                       | How to Replicate                                                |
| -------------------------------- | ------------------------------------------------- | --------------------------------------------------------------- |
| **14. Data Loss / Packet Drop**  | Missing sensor data due to transmission issues    | Drop readings randomly in software or disable Wi-Fi momentarily |
| **15. Timestamp Errors**         | Readings logged with wrong time                   | Offset the system clock or shuffle timestamps in logs           |
| **16. Buffer Overflow or Delay** | Lag between data collection and processing        | Introduce artificial delay or log queue overflows               |
| **17. ADC Resolution Issue**     | Sensor reads coarse values due to poor resolution | Simulate using rounding (e.g., force readings to nearest 2°C)   |

---

### 🧪 Testing & Simulation Ideas

* **Software Mocking:** Use Python or Arduino code to simulate various fault patterns and feed them to the system.
* **Hardware Testing:** Use resistive heating, cooling sprays, power supply variation, or isolation (plastic covers) for physical faults.
* **Fault Injection Frameworks:** Tools like [Fault Injection Toolkits (FIT)](https://github.com/fault-injection/fault-injection) or custom Python scripts to manipulate data streams.

---

Would you like a **test case matrix** (e.g., Excel or table format) to systematically test each of these?
Here is a flowchart for a **Rate-of-Change (ROC) based Adaptive Threshold Alarm System**:

### 🧠 Algorithm Logic (simplified):

1. **Read current and previous temperature readings**.
2. **Calculate the rate of change**:

   $$
   \Delta T = T(t) - T(t-1), \quad \text{ROC} = \frac{\Delta T}{\Delta t}
   $$
3. If ROC exceeds a predefined limit (e.g., 5°C/min), treat it as a **transient spike** and hold alarm for 1–2 cycles.
4. If temperature remains high (above dynamic threshold), then **raise alarm**.
5. Update last reading and continue.

This helps prevent false alarms from short-lived spikes while still ensuring critical alerts are triggered. Would you like me to turn this into executable Python code or Arduino logic?
Thanks for the detailed description — I’ve clearly understood your problem:
You're dealing with **false alarms** due to **hard-coded static thresholds** in an ambient temperature monitoring system for switchgear. The **alarm is triggered by sudden spikes**, even if the system stabilizes quickly. You’d like to move from rigid limits (e.g., 40–45 °C) to a **more intelligent, adaptive system** that respects the IEEE temperature rise constraints (65 °C) but can evolve based on contextual conditions.

While there were no direct academic matches found from your file search, here's a structured breakdown of **potential solutions and innovations**, moving from **simplest** to **most advanced**, along with **out-of-the-box ideas**:

---

### 🧮 **Basic Mathematical Approaches (Non-AI)**

#### 1. **Moving Average + Hysteresis Buffer**

* **How it works:** Use a moving average (e.g., 5-minute rolling average) to smooth out transient spikes.
* **Add hysteresis:** Only raise an alarm if the value stays above the threshold for a certain time (e.g., 2 minutes).
* **Formula:**

  ```
  T_avg(t) = (1/n) * Σ T(t-i)
  Alarm if T_avg(t) > 45°C for Δt > 120s
  ```
* **Pros:** Simple, robust to noise
* **Cons:** Slow response to real fast issues

#### 2. **Rate-of-Change Limit (ROC)**

* Set an upper limit on how fast the temperature can logically rise.

  ```
  ΔT/Δt < max_expected_rate
  ```
* If a spike violates the ROC, treat it as a transient, not a valid reading.

---

### 📈 **Rule-Based Adaptive Thresholds**

#### 3. **Context-Aware Dynamic Thresholds**

* Adjust thresholds based on ambient temperature:

  ```
  T_max_dynamic = T_ambient + K
  ```

  Where **K** can be learned from historical data (e.g., K ≈ 20°C typically, but adapt it).
* This keeps thresholds adaptive to seasonal or location-based variations.

#### 4. **Exponential Smoothing or EWMA**

* Give more weight to recent temperatures while adapting:

  ```
  S_t = α * T_t + (1 - α) * S_{t-1}
  ```

  Raise alarm only if **S\_t** exceeds threshold, not raw value.

---

### 🤖 **Machine Learning-Based Solutions**

#### 5. **Unsupervised Anomaly Detection**

* Use ML models to learn “normal” behavior from time-series data.

* Suggested models:

  * **Isolation Forest**: Detects anomalies by path length.
  * **Autoencoders**: Reconstruct sensor values. Large reconstruction error = anomaly.
  * **One-Class SVM**: Learns the normal envelope.

* **Training data:** Past sensor logs (no label required).

* **Pros:** No need to define thresholds manually.

* **Cons:** Needs good quality historical data.

#### 6. **Adaptive Thresholding with Online Learning**

* Implement an **online learning** algorithm that continuously updates thresholds.
* Models: **Online K-means**, **Bayesian Change Point Detection**, or **Gaussian Process Regression**
* These adapt thresholds based on evolving context (e.g., aging equipment, new climate).

---

### 💡 **Out-of-the-Box Ideas**

#### 7. **Digital Twin of the Switchgear**

* Simulate thermal profile in software based on load, airflow, and weather.
* Raise alarm only if actual sensor data diverges significantly from simulation.

#### 8. **Edge AI Inference with TinyML**

* Train a lightweight model to detect anomalies and deploy it on microcontrollers (e.g., ESP32, Arduino Nano 33 BLE).
* Benefit: Real-time correction without cloud dependency.

#### 9. **Multi-Sensor Fusion + Voting System**

* Fuse readings from multiple temperature sensors (ambient, busbar, enclosure).
* Use voting or consensus before triggering alarm. One rogue sensor can’t dominate.

#### 10. **Entropy-Based Monitoring**

* Monitor the *entropy* (uncertainty) of sensor readings.

  * Stable system = low entropy
  * Spike or disturbance = high entropy
* Set alarm thresholds based on entropy level, not raw temperature.

---

### 🔍 Suggested Research Directions

Although direct papers weren’t found in this search, you can explore:

* IEEE Xplore keywords: “adaptive thresholds in IoT”, “anomaly detection in IIoT”, “fault-tolerant sensor fusion”
* Use cases in **predictive maintenance**, **substation automation**, and **smart grid fault diagnostics** will be closest to your context.

Would you like me to draft a concept diagram or pseudocode for one of these approaches?
Thanks for the detailed description — I’ve clearly understood your problem:
You're dealing with **false alarms** due to **hard-coded static thresholds** in an ambient temperature monitoring system for switchgear. The **alarm is triggered by sudden spikes**, even if the system stabilizes quickly. You’d like to move from rigid limits (e.g., 40–45 °C) to a **more intelligent, adaptive system** that respects the IEEE temperature rise constraints (65 °C) but can evolve based on contextual conditions.

While there were no direct academic matches found from your file search, here's a structured breakdown of **potential solutions and innovations**, moving from **simplest** to **most advanced**, along with **out-of-the-box ideas**:

---

### 🧮 **Basic Mathematical Approaches (Non-AI)**

#### 1. **Moving Average + Hysteresis Buffer**

* **How it works:** Use a moving average (e.g., 5-minute rolling average) to smooth out transient spikes.
* **Add hysteresis:** Only raise an alarm if the value stays above the threshold for a certain time (e.g., 2 minutes).
* **Formula:**

  ```
  T_avg(t) = (1/n) * Σ T(t-i)
  Alarm if T_avg(t) > 45°C for Δt > 120s
  ```
* **Pros:** Simple, robust to noise
* **Cons:** Slow response to real fast issues

#### 2. **Rate-of-Change Limit (ROC)**

* Set an upper limit on how fast the temperature can logically rise.

  ```
  ΔT/Δt < max_expected_rate
  ```
* If a spike violates the ROC, treat it as a transient, not a valid reading.

---

### 📈 **Rule-Based Adaptive Thresholds**

#### 3. **Context-Aware Dynamic Thresholds**

* Adjust thresholds based on ambient temperature:

  ```
  T_max_dynamic = T_ambient + K
  ```

  Where **K** can be learned from historical data (e.g., K ≈ 20°C typically, but adapt it).
* This keeps thresholds adaptive to seasonal or location-based variations.

#### 4. **Exponential Smoothing or EWMA**

* Give more weight to recent temperatures while adapting:

  ```
  S_t = α * T_t + (1 - α) * S_{t-1}
  ```

  Raise alarm only if **S\_t** exceeds threshold, not raw value.

---

### 🤖 **Machine Learning-Based Solutions**

#### 5. **Unsupervised Anomaly Detection**

* Use ML models to learn “normal” behavior from time-series data.

* Suggested models:

  * **Isolation Forest**: Detects anomalies by path length.
  * **Autoencoders**: Reconstruct sensor values. Large reconstruction error = anomaly.
  * **One-Class SVM**: Learns the normal envelope.

* **Training data:** Past sensor logs (no label required).

* **Pros:** No need to define thresholds manually.

* **Cons:** Needs good quality historical data.

#### 6. **Adaptive Thresholding with Online Learning**

* Implement an **online learning** algorithm that continuously updates thresholds.
* Models: **Online K-means**, **Bayesian Change Point Detection**, or **Gaussian Process Regression**
* These adapt thresholds based on evolving context (e.g., aging equipment, new climate).

---

### 💡 **Out-of-the-Box Ideas**

#### 7. **Digital Twin of the Switchgear**

* Simulate thermal profile in software based on load, airflow, and weather.
* Raise alarm only if actual sensor data diverges significantly from simulation.

#### 8. **Edge AI Inference with TinyML**

* Train a lightweight model to detect anomalies and deploy it on microcontrollers (e.g., ESP32, Arduino Nano 33 BLE).
* Benefit: Real-time correction without cloud dependency.

#### 9. **Multi-Sensor Fusion + Voting System**

* Fuse readings from multiple temperature sensors (ambient, busbar, enclosure).
* Use voting or consensus before triggering alarm. One rogue sensor can’t dominate.

#### 10. **Entropy-Based Monitoring**

* Monitor the *entropy* (uncertainty) of sensor readings.

  * Stable system = low entropy
  * Spike or disturbance = high entropy
* Set alarm thresholds based on entropy level, not raw temperature.

---

### 🔍 Suggested Research Directions

Although direct papers weren’t found in this search, you can explore:

* IEEE Xplore keywords: “adaptive thresholds in IoT”, “anomaly detection in IIoT”, “fault-tolerant sensor fusion”
* Use cases in **predictive maintenance**, **substation automation**, and **smart grid fault diagnostics** will be closest to your context.

Would you like me to draft a concept diagram or pseudocode for one of these approaches?
